use v6.d;
use Test;

use lib '.';
use lib './lib';

use ML::AssociationRuleLearning;
use Data::ExampleDatasets;
use Data::Reshapers;

sub is-list-of-lists($arr) {
    $arr ~~ List and ([and] $arr.map({ $_ ~~ List }))
}

plan 13;

## 1
use-ok 'Data::ExampleDatasets', 'Data::ExampleDatasets loads ok';

## 2
use-ok 'Data::Reshapers', 'Data::Reshapers loads ok';

## 3
my @dsTitanic = get-titanic-dataset();
is is-list-of-lists(@dsTitanic.map({ $_.values.List }).Array), True, 'Expected @dsTitanic transformed shape';

## 4
ok eclat(@dsTitanic, 200);

## 5
ok eclat(@dsTitanic, 0.2);

## 6
ok eclat(@dsTitanic, min-support => 200, min-number-of-items => 2, max-number-of-items => 5);

## 7
ok eclat(@dsTitanic, min-support => 200, min-number-of-items => 2, max-number-of-items => 5):counts;

## 8
ok eclat(@dsTitanic.map({ $_.values.List }).Array, 200);

## 9
ok apriori(@dsTitanic, 200);

## 10
ok apriori(@dsTitanic, 0.2);

## 11
ok apriori(@dsTitanic, min-support => 200, min-number-of-items => 2, max-number-of-items => 3);

## 12
ok apriori(@dsTitanic, min-support => 200, min-number-of-items => 2, max-number-of-items => 3):counts;

## 13
ok apriori(@dsTitanic.map({ $_.values.List }).Array, 200);

done-testing;
